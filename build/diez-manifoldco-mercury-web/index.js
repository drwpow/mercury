// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

module.exports = {};

if (typeof process === 'undefined' || !process) {
  process = {env: {}};
} else if (!process.env) {
  Object.defineProperty(process, 'env', {
    value: {},
  });
}

const Environment = {
  serverUrl: process.env.DIEZ_SERVER_URL || '/diez',
  isHot: process.env.DIEZ_IS_HOT,
};

const diezHTMLExtensions = [];

class Diez {
  constructor (componentType) {
    if (typeof document !== 'undefined') {
      this.iframe = document.createElement('iframe');
    } else {
      this.iframe = {};
    }

    this.componentType = componentType;
    this.component = new this.componentType();
    this.subscribers = [];
  }

  static applyHTMLExtensions () {
    diezHTMLExtensions.forEach((extension) => {
      if (extension instanceof Function) {
        extension();
      }
    });
  }

  broadcast () {
    for (const subscriber of this.subscribers) {
      subscriber(this.component);
    }
  }

  subscribe (subscriber) {
    this.subscribers.push(subscriber);
  }

  attach (subscriber) {
    subscriber(this.component);
    if (!Environment.isHot) {
      return;
    }
    this.subscribe(subscriber);
    if (this.iframe.contentWindow) {
      return;
    }
    this.iframe.src = `${Environment.serverUrl}/components/${this.component.constructor.name}`;
    this.iframe.width = '0';
    this.iframe.height = '0';
    this.iframe.style.display = 'none';

    if (typeof document !== 'undefined') {
      document.body.appendChild(this.iframe);
      window.addEventListener('message', (event) => {
        if (event.source === this.iframe.contentWindow && event.origin.startsWith(Environment.serverUrl)) {
          this.component = new this.componentType(JSON.parse(event.data));
          this.broadcast();
        }
      });
    }
  }
}

module.exports.Diez = Diez;

/**
A component encapsulating color, including alpha transparency.

You can use the provided static constructors [[Color.rgb]], [[Color.rgba]], [[Color.hsl]], [[Color.hsla]], and
[[Color.hex]] to conveniently create color primitives using familiar patterns for color specification.
*/
class Color {
  constructor({
    h,
    s,
    l,
    a
  }) {
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.h = h;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.s = s;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.l = l;
  /**
  Provides simple hue-saturation-lightness-alpha color data.
  */
    this.a = a;
  }
}


module.exports.Color = Color;

const {colorToCss} = require('@diez/web-sdk-common');

Object.defineProperties(Color.prototype, {
  color: {
    get () {
      return colorToCss(this);
    },
  },
  colorStyle: {
    get () {
      return {
        color: this.color,
      };
    },
  },
  backgroundColorStyle: {
    get () {
      return {
        backgroundColor: this.color,
      };
    },
  },
  borderColorStyle: {
    get () {
      return {
        borderColor: this.color,
      };
    },
  },
  outlineColorStyle: {
    get () {
      return {
        outlineColor: this.color,
      };
    },
  },
});

class StylesColors {
  constructor({
    black = {h: 0, s: 0, l: 0, a: 1},
    white = {h: 0, s: 0, l: 1, a: 1},
    green = {h: 0.47080291970802923, s: 0.5829787234042554, l: 0.46078431372549017, a: 1},
    mutedGreen = {h: 0.4357142857142857, s: 0.6249999999999997, l: 0.7803921568627451, a: 1},
    red = {h: 0.9622467771639043, s: 0.7387755102040816, l: 0.4803921568627451, a: 1},
    mutedRed = {h: 0.9604519774011301, s: 1, l: 0.884313725490196, a: 1},
    blue = {h: 0.6223404255319149, s: 0.7580645161290323, l: 0.48627450980392156, a: 1},
    mutedBlue = {h: 0.6060606060606061, s: 0.9428571428571431, l: 0.9313725490196079, a: 1},
    yellow = {h: 0.1348747591522158, s: 1, l: 0.6607843137254902, a: 1},
    mutedYellow = {h: 0.1357142857142857, s: 1, l: 0.8627450980392157, a: 1},
    orange = {h: 0.08253968253968254, s: 0.9130434782608696, l: 0.5490196078431373, a: 1},
    mutedOrange = {h: 0.06851851851851849, s: 1, l: 0.8235294117647058, a: 1},
    purple = {h: 0.7234299516908212, s: 0.6052631578947367, l: 0.5529411764705883, a: 1},
    mutedPurple = {h: 0.7250000000000001, s: 0.7142857142857146, l: 0.8901960784313725, a: 1},
    teal = {h: 0.5234375, s: 0.8571428571428571, l: 0.4392156862745098, a: 1},
    mutedTeal = {h: 0.5246913580246914, s: 0.7500000000000004, l: 0.8588235294117648, a: 1},
    grayLightest = {h: 0.6666666666666666, s: 0.06666666666666654, l: 0.9705882352941176, a: 1},
    grayLighter = {h: 0.6666666666666666, s: 0.027027027027026945, l: 0.9274509803921569, a: 1},
    grayLight = {h: 0.6666666666666666, s: 0.014925373134328308, l: 0.8686274509803922, a: 1},
    gray = {h: 0.6666666666666666, s: 0.02752293577981655, l: 0.5725490196078431, a: 1},
    grayDark = {h: 0.5833333333333334, s: 0.04395604395604395, l: 0.3568627450980392, a: 1},
    grayDarker = {h: 0.5833333333333334, s: 0.12280701754385966, l: 0.22352941176470587, a: 1},
    black1 = {h: 0, s: 0, l: 0, a: 1},
    colorYellow = {h: 0.1348747591522158, s: 1, l: 0.6607843137254902, a: 1}
  } = {}) {
    this.black = new Color(black);
    this.white = new Color(white);
    this.green = new Color(green);
    this.mutedGreen = new Color(mutedGreen);
    this.red = new Color(red);
    this.mutedRed = new Color(mutedRed);
    this.blue = new Color(blue);
    this.mutedBlue = new Color(mutedBlue);
    this.yellow = new Color(yellow);
    this.mutedYellow = new Color(mutedYellow);
    this.orange = new Color(orange);
    this.mutedOrange = new Color(mutedOrange);
    this.purple = new Color(purple);
    this.mutedPurple = new Color(mutedPurple);
    this.teal = new Color(teal);
    this.mutedTeal = new Color(mutedTeal);
    this.grayLightest = new Color(grayLightest);
    this.grayLighter = new Color(grayLighter);
    this.grayLight = new Color(grayLight);
    this.gray = new Color(gray);
    this.grayDark = new Color(grayDark);
    this.grayDarker = new Color(grayDarker);
    this.black1 = new Color(black1);
    this.colorYellow = new Color(colorYellow);
  }
}


module.exports.StylesColors = StylesColors;

/**
Provides a gradient stop.
*/
class GradientStop {
  constructor({
    position,
    color
  }) {
  /**
  GradientStop data.
  */
    this.position = position;
    /**
    GradientStop data.
    **/
    this.color = new Color(color);
  }
}


module.exports.GradientStop = GradientStop;

/**
Provides a two dimensional point.

Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.

Usage: `point = Point2D.make(0.5, 0.5);`.
*/
class Point2D {
  constructor({
    x,
    y
  }) {
  /**
  Point data.
  */
    this.x = x;
  /**
  Point data.
  */
    this.y = y;
  }
}


module.exports.Point2D = Point2D;

/**
Provides a linear gradient.
*/
class LinearGradient {
  constructor({
    stops,
    start,
    end
  }) {
    this.stops = stops.map((value1) => new GradientStop(value1));
    /**
    LinearGradient data.
    **/
    this.start = new Point2D(start);
    /**
    LinearGradient data.
    **/
    this.end = new Point2D(end);
  }
}


module.exports.LinearGradient = LinearGradient;

const {linearGradientToCss} = require('@diez/web-sdk-common');

Object.defineProperties(LinearGradient.prototype, {
  linearGradient: {
    get () {
      return linearGradientToCss(this);
    },
  },
  backgroundImageStyle: {
    get () {
      return {
        backgroundImage: this.linearGradient,
      };
    },
  },
  backgroundStyle: {
    get () {
      return {
        background: this.linearGradient,
      };
    },
  },
});

class StylesGradients {
  constructor({
    gradientGreen = {stops: [{position: 0, color: {h: 0.4226190476190476, s: 0.45528455284552855, l: 0.5176470588235295, a: 1}}, {position: 1, color: {h: 0.5545073375262054, s: 0.6334661354581673, l: 0.5078431372549019, a: 1}}], start: {x: 0.821016851389819, y: -0.105676656843359}, end: {x: -0.390336415164722, y: 0.674996301605858}},
    gradientBrand = {stops: [{position: 0, color: {h: 0.9453900709219858, s: 0.9915611814345991, l: 0.5352941176470588, a: 1}}, {position: 0.26458865404129, color: {h: 0.7552083333333334, s: 0.38095238095238093, l: 0.49411764705882355, a: 1}}, {position: 0.609017670154572, color: {h: 0.5545073375262054, s: 0.6385542168674698, l: 0.4882352941176471, a: 1}}, {position: 0.728924870491028, color: {h: 0.05978260869565217, s: 0.9787234042553192, l: 0.6313725490196078, a: 1}}, {position: 1, color: {h: 0.12333333333333331, s: 0.9803921568627452, l: 0.6, a: 1}}], start: {x: 1.181249980120726, y: -8.693732e-9}, end: {x: -0.409674694679825, y: 0.914285662290109}},
    gradientGreenMuted = {stops: [{position: 0, color: {h: 0.4190476190476191, s: 0.636363636363637, l: 0.892156862745098, a: 1}}, {position: 1, color: {h: 0.5555555555555556, s: 1, l: 0.9176470588235295, a: 1}}], start: {x: 0.821016851389819, y: -0.105676656843359}, end: {x: -0.390336415164722, y: 0.674996301605858}},
    gradientBrand1 = {stops: [{position: 0, color: {h: 0.9722222222222222, s: 0.6407766990291263, l: 0.596078431372549, a: 1}}, {position: 1, color: {h: 0.816017316017316, s: 0.35159817351598177, l: 0.4294117647058824, a: 1}}], start: {x: 4.377216e-9, y: 1.000000004377216}, end: {x: 1.000000004377216, y: 4.377216e-9}},
    gradientBrandMuted = {stops: [{position: 0, color: {h: 0.9689922480620154, s: 0.5443037974683547, l: 0.8450980392156863, a: 1}}, {position: 1, color: {h: 0.818181818181818, s: 0.2972972972972973, l: 0.8549019607843138, a: 1}}], start: {x: 4.377216e-9, y: 1.000000004377216}, end: {x: 1.000000004377216, y: 4.377216e-9}},
    gradientBlue = {stops: [{position: 0, color: {h: 0.5545073375262054, s: 0.6334661354581673, l: 0.5078431372549019, a: 1}}, {position: 1, color: {h: 0.6647058823529411, s: 0.3497942386831276, l: 0.47647058823529415, a: 1}}], start: {x: 0.5, y: -0.5}, end: {x: -0.5, y: 0.5}},
    gradientBlueMuted = {stops: [{position: 0, color: {h: 0.5555555555555555, s: 1, l: 0.8470588235294118, a: 1}}, {position: 1, color: {h: 0.6637931034482759, s: 1, l: 0.8862745098039215, a: 1}}], start: {x: 0.5, y: -0.5}, end: {x: -0.5, y: 0.5}},
    gradientYellow = {stops: [{position: 0, color: {h: 0.1065989847715736, s: 1, l: 0.6137254901960785, a: 1}}, {position: 1, color: {h: 0.1346578366445916, s: 1, l: 0.7039215686274509, a: 1}}], start: {x: 0.527897182467498, y: 1.55579430626508}, end: {x: 1.527897158999531, y: 0.499999988266017}},
    gradientYellowMuted = {stops: [{position: 0, color: {h: 0.10691823899371067, s: 1, l: 0.7921568627450981, a: 1}}, {position: 1, color: {h: 0.13636363636363638, s: 1, l: 0.9137254901960784, a: 1}}], start: {x: 0.567276093902552, y: 1.59738067308683}, end: {x: 1.650448750489284, y: 0.46282849512784}},
    gradientOrange = {stops: [{position: 0, color: {h: 0.935441370223979, s: 1, l: 0.503921568627451, a: 1}}, {position: 1, color: {h: 0.14215686274509803, s: 0.9807692307692308, l: 0.592156862745098, a: 1}}], start: {x: 0.322843937601224, y: 2.070313632698886}, end: {x: 1.846504348936375, y: 0.67485791912246}},
    gradientOrangeMuted = {stops: [{position: 0, color: {h: 0.04791666666666667, s: 0.8000000000000004, l: 0.803921568627451, a: 1}}, {position: 1, color: {h: 0.1083333333333333, s: 1, l: 0.9215686274509804, a: 1}}], start: {x: 0.53288843739154, y: 1.755845003537722}, end: {x: 1.762725784434706, y: 0.527946382205596}},
    gradientPurple = {stops: [{position: 0, color: {h: 0.7269503546099291, s: 1, l: 0.7235294117647059, a: 1}}, {position: 1, color: {h: 0.689727463312369, s: 0.7004405286343612, l: 0.5549019607843138, a: 1}}], start: {x: 0.5, y: -0.5}, end: {x: -0.5, y: 0.5}},
    gradientPurpleMuted = {stops: [{position: 0, color: {h: 0.7272727272727272, s: 1, l: 0.9352941176470588, a: 1}}, {position: 1, color: {h: 0.6888888888888888, s: 1, l: 0.8823529411764706, a: 1}}], start: {x: 0.5, y: -0.5}, end: {x: -0.5, y: 0.5}},
    gradientRed = {stops: [{position: 0, color: {h: 0.9825102880658436, s: 0.8617021276595743, l: 0.3686274509803922, a: 1}}, {position: 1, color: {h: 0.9513201320132013, s: 1, l: 0.6039215686274509, a: 1}}], start: {x: 0.5, y: 1.5}, end: {x: 1.5, y: 0.5}},
    gradientRedMuted = {stops: [{position: 0, color: {h: 0, s: 1, l: 0.8509803921568627, a: 1}}, {position: 1, color: {h: 0.935792349726776, s: 0.9682539682539684, l: 0.7529411764705882, a: 1}}], start: {x: 0.5, y: -0.5}, end: {x: -0.5, y: 0.5}}
  } = {}) {
    this.gradientGreen = new LinearGradient(gradientGreen);
    this.gradientBrand = new LinearGradient(gradientBrand);
    this.gradientGreenMuted = new LinearGradient(gradientGreenMuted);
    this.gradientBrand1 = new LinearGradient(gradientBrand1);
    this.gradientBrandMuted = new LinearGradient(gradientBrandMuted);
    this.gradientBlue = new LinearGradient(gradientBlue);
    this.gradientBlueMuted = new LinearGradient(gradientBlueMuted);
    this.gradientYellow = new LinearGradient(gradientYellow);
    this.gradientYellowMuted = new LinearGradient(gradientYellowMuted);
    this.gradientOrange = new LinearGradient(gradientOrange);
    this.gradientOrangeMuted = new LinearGradient(gradientOrangeMuted);
    this.gradientPurple = new LinearGradient(gradientPurple);
    this.gradientPurpleMuted = new LinearGradient(gradientPurpleMuted);
    this.gradientRed = new LinearGradient(gradientRed);
    this.gradientRedMuted = new LinearGradient(gradientRedMuted);
  }
}


module.exports.StylesGradients = StylesGradients;

/**
Provides a container for referencing local assets, which can be bridged by compilers to embed images, SVGs,
and more. This component is used internally by [[Image]] and [[Font]].

The compiler may enforce certain restrictions on the `type` of a `File` instance.

Usage: `file = new File({src: 'assets/images/file.jpg', type: FileType.Image});`.
*/
class File {
  constructor({
    src,
    type
  }) {
  /**
  File data.
  */
    this.src = src;
  /**
  File data.
  */
    this.type = type;
  }
}


module.exports.File = File;

Object.defineProperties(File.prototype, {
  url: {
    get () {
      return `${Environment.serverUrl}/${this.src}`;
    },
  },
});

/**
A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
*/
class Font {
  constructor({
    file,
    name,
    fallbacks,
    weight,
    style
  }) {
    /**
    Font data.
    **/
    this.file = new File(file);
  /**
  Font data.
  */
    this.name = name;
  /**
  Font data.
  */
    this.fallbacks = fallbacks;
  /**
  Font data.
  */
    this.weight = weight;
  /**
  Font data.
  */
    this.style = style;
  }
}


module.exports.Font = Font;

/**
Describes a typograph including specification of a font name (understood to specify both a font face and a font
weight) as well as a font size in device-local units and a font color.
*/
class Typograph {
  constructor({
    font,
    fontSize,
    color,
    lineHeight,
    letterSpacing,
    alignment,
    decoration
  }) {
    /**
    Typograph data.
    **/
    this.font = new Font(font);
  /**
  Typograph data.
  */
    this.fontSize = fontSize;
    /**
    Typograph data.
    **/
    this.color = new Color(color);
  /**
  Typograph data.
  */
    this.lineHeight = lineHeight;
  /**
  Typograph data.
  */
    this.letterSpacing = letterSpacing;
  /**
  Typograph data.
  */
    this.alignment = alignment;
  /**
  Typograph data.
  */
    this.decoration = decoration;
  }
}


module.exports.Typograph = Typograph;

const {fontToCss, FontFormats, textAlignmentToCss, textDecorationsToCss} = require('@diez/web-sdk-common');

let styleSheet;
let cache;

const registerFont = (font) => {
  if (!styleSheet || !cache) {
    const styleEl = document.createElement('style');
    document.head.appendChild(styleEl);
    styleSheet = styleEl.sheet;
    cache = new Set();
  }

  if (cache.has(font.file.src)) {
    return;
  }

  const format = font.file.src.split('.').pop();
  const rule = `
@font-face {
  font-family: '${font.name}';
  font-weight: ${font.weight};
  font-style: ${font.style};
  src: local('${font.name}'), url(${font.file.url}) format('${FontFormats[format] || format}');
}`;
  styleSheet.insertRule(rule);
  cache.add(font.file.src);
};

Object.defineProperties(Typograph.prototype, {
  fontFamily: {
    get () {
      registerFont(this.font);
      return fontToCss(this.font);
    },
  },
  style: {
    get () {
      const style = {
        fontFamily: this.fontFamily,
        fontWeight: this.font.fontWeight,
        fontStyle: this.font.fontStyle,
        fontSize: `${this.fontSize}px`,
        color: this.color.color,
        letterSpacing: `${this.letterSpacing}px`,
        textAlign: textAlignmentToCss(this.alignment),
        textDecoration: textDecorationsToCss(this.decoration),
      };
      if (this.lineHeight !== -1) {
        style.lineHeight = `${this.lineHeight}px`;
      }
      return style;
    },
  },
});

Typograph.prototype.applyStyle = function (ref) {
  const style = this.style;
  ref.style.fontFamily = style.fontFamily;
  ref.style.fontWeight = style.fontWeight;
  ref.style.fontStyle = style.fontStyle;
  ref.style.fontSize = style.fontSize;
  ref.style.color = style.color;
  ref.style.lineHeight = style.lineHeight;
  ref.style.letterSpacing = style.letterSpacing;
  ref.style.textAlign = style.textAlign;
};

diezHTMLExtensions.push(() => {
  HTMLElement.prototype.applyTypograph = (typograph) => {
    typograph.applyStyle(this);
  };
});

class StylesTypography {
  constructor({
    caption = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    monoCaption = {font: {file: {src: "assets/Styles.figma.contents/fonts/IBMPlexMono.otf", type: "font"}, name: "IBMPlexMono", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 10, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    label = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    monoLabel = {font: {file: {src: "assets/Styles.figma.contents/fonts/IBMPlexMono.otf", type: "font"}, name: "IBMPlexMono", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 12, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    body = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    monoBody = {font: {file: {src: "assets/Styles.figma.contents/fonts/IBMPlexMono.otf", type: "font"}, name: "IBMPlexMono", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    subheadingSmall = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Medium.otf", type: "font"}, name: "SFProText-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 11, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    subheading = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Semibold.otf", type: "font"}, name: "SFProText-Semibold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 13, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    heading = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 20, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    headingLarge = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 25, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    headingExtraLarge = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Medium.otf", type: "font"}, name: "SFProText-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 32, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    sidebarBigTitle = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Semibold.otf", type: "font"}, name: "SFProText-Semibold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    sidebarSmallTitle = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Bold.otf", type: "font"}, name: "SFProText-Bold", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenCaption = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 13, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenLabel = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 14, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenBody = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 16, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenHeading = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 18, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenHeadingLarge = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Regular.otf", type: "font"}, name: "SFProText-Regular", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 22, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []},
    smallScreenHeadingExtraLarge = {font: {file: {src: "assets/Styles.figma.contents/fonts/SFProText-Medium.otf", type: "font"}, name: "SFProText-Medium", fallbacks: ["sans-serif"], weight: 400, style: "normal"}, fontSize: 26, color: {h: 0, s: 0, l: 0, a: 1}, lineHeight: -1, letterSpacing: 0, alignment: "natural", decoration: []}
  } = {}) {
    this.caption = new Typograph(caption);
    this.monoCaption = new Typograph(monoCaption);
    this.label = new Typograph(label);
    this.monoLabel = new Typograph(monoLabel);
    this.body = new Typograph(body);
    this.monoBody = new Typograph(monoBody);
    this.subheadingSmall = new Typograph(subheadingSmall);
    this.subheading = new Typograph(subheading);
    this.heading = new Typograph(heading);
    this.headingLarge = new Typograph(headingLarge);
    this.headingExtraLarge = new Typograph(headingExtraLarge);
    this.sidebarBigTitle = new Typograph(sidebarBigTitle);
    this.sidebarSmallTitle = new Typograph(sidebarSmallTitle);
    this.smallScreenCaption = new Typograph(smallScreenCaption);
    this.smallScreenLabel = new Typograph(smallScreenLabel);
    this.smallScreenBody = new Typograph(smallScreenBody);
    this.smallScreenHeading = new Typograph(smallScreenHeading);
    this.smallScreenHeadingLarge = new Typograph(smallScreenHeadingLarge);
    this.smallScreenHeadingExtraLarge = new Typograph(smallScreenHeadingExtraLarge);
  }
}


module.exports.StylesTypography = StylesTypography;

class DesignLanguage {
  constructor({
    colors = {},
    gradients = {},
    typography = {}
  } = {}) {
    this.colors = new StylesColors(colors);
    this.gradients = new StylesGradients(gradients);
    this.typography = new StylesTypography(typography);
  }
}

Object.defineProperty(DesignLanguage, 'name', {value: 'DesignLanguage'});

module.exports.DesignLanguage = DesignLanguage;

